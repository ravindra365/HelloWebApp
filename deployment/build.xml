	<project name="DynamicDeploy" default="deploy" basedir=".">
	
	<!-- Load Jenkins environment -->
    <property environment="env"/>
    <property name="target.env" value="${env.TARGET_ENV}"/>
	<!-- <property name="target.passphrase" value="${env.PASSPHRASE}"/> -->
	
	<!-- Validate environment -->
    <fail message="No environment selected. Aborting." if="target.env" unless="target.env"/>
    <condition property="is.valid.env">
        <or>
            <equals arg1="${target.env}" arg2="sandbox"/>
            <equals arg1="${target.env}" arg2="prod"/>
        </or>
    </condition>
    <fail message="Invalid environment: '${target.env}'" unless="is.valid.env"/>
	
	<!-- Load environment-specific config -->
    <target name="load-config">
        <echo message="Loading config for ${target.env}"/>
        <property file="env-properties/${target.env}.properties"/>
    </target>

    <property name="job.name" value="${env.JOB_NAME}"/>
    <property name="build.number" value="${env.BUILD_NUMBER}"/>
    <property name="jenkins.home" value="${env.JENKINS_HOME}"/>

    <property name="jenkins.log.path" 
              value="${jenkins.home}/jobs/${job.name}/builds/${build.number}/log"/>
    <property name="local.log.path" value="console.log"/>
	
    <!-- Upload artifact via native scp -->
    <target name="upload-artifact" depends="load-config">
        <echo message="Uploading ${artifact.path} to ${target.user}@${target.host}:${remote.deploy.path} ${target.passphrase}"/>
		<exec executable="bash">
			<arg line="-c 'eval $(ssh-agent -s) &amp;&amp; echo ${target.passphrase} | ssh-add ${target.key} &amp;&amp; scp ${artifact.path} ${target.user}@${target.host}:${remote.deploy.path}'" />
		</exec>		
		<echo message="Uploading finish on remote deployment:${remote.deploy.path}"/>
    </target>  

    <!-- Combined deploy target -->
    <target name="deploy" depends="upload-artifact"> 
        <echo message="Deployment to ${target.env} completed."/>
    </target>
	
    <!-- Copy log file -->
    <target name="copy-log">
        <copy file="${jenkins.log.path}" tofile="${local.log.path}" failonerror="true"/>
    </target>

</project>
